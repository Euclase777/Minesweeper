unit Minesweeper;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.Menus,
  System.ImageList, Vcl.ImgList, Vcl.StdCtrls, Vcl.ComCtrls, Vcl.DBCGrids,
  Vcl.Grids, System.Actions, Vcl.ActnList, System.Types;

type
  TFormMain = class(TForm)
    PanelMain: TPanel;
    PanelHUD: TPanel;
    MainMenu1: TMainMenu;
    N1: TMenuItem;
    N2: TMenuItem;
    N3: TMenuItem;
    N4: TMenuItem;
    N5: TMenuItem;
    GamePanel: TPanel;
    BtnRestart: TButton;
    ImageListSmile: TImageList;
    PaintBox: TPaintBox;
    procedure GameFieldDraw(Sender: TObject);
    procedure TileOpen(Sender: TObject);
    procedure RestartGame(Sender: TObject);
    procedure TileFlag(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FormMain: TFormMain;
  openTiles:integer;
  MinesGend:boolean = False;
  xs:integer = 9;
  ys:integer = 9;
  MinesAm:integer = 10;
  MinesLocation:array of array of integer;
  TileStates:array of array of integer;
  TileMouseX, TileMouseY:integer;

implementation

{$R *.dfm}



//определяет нажатую клетку
procedure TileMouseCoords;
begin
  TileMouseX:=(Mouse.CursorPos.X-FormMain.Left-24) div 32;
  TileMouseY:=(Mouse.CursorPos.Y-FormMain.Top-154) div 32;
end;

//открывает клетку
procedure openTile(TileX:integer;TileY:integer);
begin
  if ((TileStates[TileX,TileY]=1)or(TileStates[TileX,TileY]=-2)) then begin
    TileStates[TileX,TileY]:=0;
    inc(openTiles);

    with FormMain.PaintBox, FormMain.PaintBox.Canvas do
    begin
      Pen.Color:=clBtnShadow;
      Brush.Color:=clSilver;
      Rectangle(32*TileX,32*TileY,32*(TileX+1)-1,32*(TileY+1)-1);
    end;

    //открывать пустые последовательно
    if MinesLocation[TileX,TileY]=0 then begin
      if TileY>0 then openTile(TileX,TileY-1);
      if (TileY<ys-1) then openTile(TileX,TileY+1);
      if TileX>0 then openTile(TileX-1,TileY);
      if (TileX<xs-1) then openTile(TileX+1,TileY);
    end;

    //открыть бомбу
    if MinesLocation[TileX, TileY]=9 then begin

    end;
  end;
end;

//считает сколько бомб вокруг
procedure pcount(x:integer;y:integer);
var
count:integer;
i,j:integer;
begin
count:=0;
 for i := (x-1) to (x+1) do begin
   for j := (y-1) to (y+1) do begin
     if ((i>-1)and(j>-1)and(i<xs-1)and(j<ys-1))then begin
       if MinesLocation[i,j]=9 then inc(count);
     end;
   end;
 end;
 MinesLocation[x,y]:=count;
end;

//генерация
procedure generate(Amount:integer);
var
MinesSpawned:integer;
i,j:integer;
begin
  randomize;
  MinesSpawned:=0;
  //создание таблицы
  SetLength(MinesLocation,xs);
  SetLength(TileStates, xs);
  for i := 0 to xs-1 do begin
    SetLength(MinesLocation[i],ys);
    SetLength(TileStates[i], ys);
  end;
  //добавление бомб
  while MinesSpawned < MinesAm do begin
    MinesLocation[random(xs-1),random(ys-1)]:=9;
    MinesSpawned:=0;
    for i := 0 to xs-1 do begin
      for j := 0 to ys-1 do begin
        if (MinesLocation[i,j]=9) then begin
        inc(MinesSpawned);
          with FormMain.PaintBox, FormMain.PaintBox.Canvas do
          begin
          Pen.Color:=clRed;
          Brush.Color:=clBlue;
          Rectangle(32*i,32*j,32*(i+1)-1,32*(j+1)-1);
          end;
        end
        else pcount(i,j);
      end;
    end;
  end;

  //отметить все клетки закрытыми
  for i := 0 to xs-1 do begin
    for j := 0 to ys-1 do begin
    TileStates[i,j]:=1;
    end;
  end;
  MinesGend:=True;
end;

procedure draw;
var
i,j:integer;
begin
  FormMain.GamePanel.Width:=(32*ys)+8;
  FormMain.GamePanel.Height:=(32*xs)+8;
  FormMain.PanelHUD.Width:=FormMain.GamePanel.Width;
  FormMain.Width:=FormMain.GamePanel.Width+38;
  FormMain.Height:=FormMain.GamePanel.Height+169;
  FormMain.BtnRestart.Left:=FormMain.PanelHUD.Width div 2 - 25;
with FormMain.PaintBox, FormMain.PaintBox.canvas do
  begin
  openTiles:=0;
  Pen.Width:=1;
      for i := 0 to (xs-1) do begin
      for j := 0 to (ys-1) do begin
      Pen.Color:=clWhite;
      polyline([Point(32*i,32*(j+1)),Point(32*i,32*j),Point(32*(i+1),32*j)]);
      polyline([Point(32*i+1,32*(j+1)-2),Point(32*i+1,32*j+1),Point(32*(i+1)-1,32*j+1)]);
      Pen.Color:=clBtnShadow;
      polyline([Point(32*i,32*(j+1)-1),Point(32*(i+1)-1,32*(j+1)-1),Point(32*(i+1)-1,32*j)]);
      polyline([Point(32*i+1,32*(j+1)-2),Point(32*(i+1)-2,32*(j+1)-2),Point(32*(i+1)-2,32*j+1)]);
      end;
    end;
  end;

end;

//создание поля
procedure TFormMain.GameFieldDraw(Sender: TObject);
begin
  draw;
end;

//рестарт
procedure TFormMain.RestartGame(Sender: TObject);
var
i,j:integer;
begin
BtnRestart.ImageIndex:=0;
MinesGend:=False;
draw;
  for i := 0 to xs-1 do begin
    for j := 0 to ys-1 do begin
    TileStates[i,j]:=0;
    MinesLocation[i,j]:=0
    end;
  end;
end;

//пкм клетку
procedure TFormMain.TileFlag(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  if Button = mbRight then begin
  TileMouseCoords;
    //флаг
    if (TileStates[TileMouseX,TileMouseY]=1)or(TileStates[TileMouseX,TileMouseY]=-2) then begin
      TileStates[TileMouseX,TileMouseY]:=-1;
    end;
    //вопрос
    if (TileStates[TileMouseX,TileMouseY]=-1) then begin
      TileStates[TileMouseX,TileMouseY]:=-2;
    end;
  end;
end;

//лкм клетку
procedure TFormMain.TileOpen(Sender: TObject);
begin
  TileMouseCoords;
  if not(MinesGend) then generate(MinesAm);
  openTile(TileMouseX,TileMouseY);
end;

end.
